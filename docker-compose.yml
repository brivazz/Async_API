version: '3'

x-base: &base
    env_file:
        - .env


networks:
  API:
    driver: bridge


services:

  redis:
    image: redis
    container_name: 'redis_cache'
    restart: unless-stopped
    networks:
      - API
    volumes:
      - ./redis/data:/data
    expose:
      - ${REDIS_PORT}

    healthcheck:
      test: [ "CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  pg:
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - API
    volumes:
      - ./postgresql/data:/var/lib/postgresql/data
      - ./etl/dump:/docker-entrypoint-initdb.d
    expose:
      - ${POSTGRES_PORT}

    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U app -d movies_database" ]
      interval: 5s
      timeout: 5s
      retries: 5

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.7.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - cluster.routing.allocation.disk.watermark.high=95%
    networks:
      - API
    expose:
      - ${ELASTICSEARCH_PORT}
    volumes:
      - ./elasticsearch/data:/usr/share/elasticsearch/data

    healthcheck:
      test: [ "CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5

  fast_api:
    build:
      context: async_api
    env_file:
      - .env
    expose:
      - ${FAST_API_PORT}
    networks:
      - API
    depends_on:
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy

  etl:
    build:
      context: etl/postgres_to_es
    env_file:
      - .env
    networks:
      - API
    environment:
      - PYTHONPATH=/opt/
    depends_on:
      pg:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy

  nginx:
    image: nginx:latest
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/configs:/etc/nginx/templates:ro
    environment:
      NGINX_ENVSUBST_TEMPLATE_SUFFIX: ".template"
      NGINX_SET_REAL_IP_FROM: 192.168.1.0/24
      FAST_API_PORT: ${FAST_API_PORT}
    depends_on:
      - fast_api
    networks:
      - API
    ports:
      - ${NGINX_PORT}:80
